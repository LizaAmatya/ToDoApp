{"version":3,"sources":["components/ListItem.js","components/Button.js","components/Search.js","components/Nav.js","App.js","serviceWorker.js","index.js"],"names":["ListItem","React","Component","this","props","status","onCheckClick","index","onDelete","className","title","onClick","Search","type","placeholder","onChange","e","onSearchChange","dis","Nav","activeStatus","onTabClick","tabTitle","App","updateChange","el","setState","clearBox","target","value","checkToDoitem","list","state","map","listItem","currentIndex","completed","addItem","keyCode","length","searchTerm","filterList","displayArr","filteredItems","filter","item","toLowerCase","includes","filtered","selectTab","newtabState","tabs","tab","currIndex","checkTab","i","displayItems","tabIndex","deleteItem","test","splice","toDisplay","key","onKeyDown","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c57c876d.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass ListItem extends React.Component {\r\n  render() {\r\n    const { status, onCheckClick, index, onDelete } = this.props;\r\n    return (\r\n      <li className=\"listitem\">\r\n        <span className={status ? \"check\" : \"\"}>{this.props.title}</span>\r\n\r\n        <button className=\"delbtn\" onClick={() => onDelete(index)}>\r\n          Delete\r\n        </button>\r\n        <button className=\"checkbtn\" onClick={() => onCheckClick(index)}>\r\n          Check\r\n        </button>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ListItem;\r\n","import React from 'react';\r\n\r\nclass Button extends React.Component {\r\n    render() {\r\n        return <button onClick = { this.props.onClick }\r\n        className = 'button' > { this.props.label } </button>\r\n    }\r\n}\r\n\r\nexport default Button;","import React from \"react\";\r\n\r\nclass Search extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          className=\"searchbar\"\r\n          placeholder=\"Search\"\r\n          onChange={e => this.props.onSearchChange(this.props.dis, e)}\r\n        ></input>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\n\r\nfunction Nav(props) {\r\n  return (\r\n    <button\r\n      className={\"tab \" + (props.activeStatus ? \"active\" : \"inactive\")}\r\n      onClick={e => props.onTabClick(props.index)}\r\n    >\r\n      {props.tabTitle}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React from \"react\";\nimport Button from \"./components/Button\";\nimport List from \"./components/ListItem\";\nimport Search from \"./components/Search\";\nimport Nav from \"./components/Nav\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      list: [{ title: \"jdhsjkf\", completed: false, index: 0 }],\n\n      clearBox: \"\",\n      searchTerm: \"\",\n      tabs: [\n        {\n          tabTitle: \"Home\",\n          activeStatus: true\n        },\n        { tabTitle: \"Completed\", activeStatus: false },\n        { tabTitle: \"Remaining\", activeStatus: false }\n      ]\n    };\n  }\n\n  updateChange = el => {\n    this.setState({ clearBox: el.target.value });\n  };\n\n  checkToDoitem = index => {\n    this.setState({\n      list: this.state.list.map((listItem, currentIndex) => {\n        if (index === currentIndex) {\n          return {\n            title: listItem.title,\n            completed: !listItem.completed\n          };\n        } else {\n          return listItem;\n        }\n      })\n    });\n  };\n\n  addItem = el => {\n    if (el.keyCode === 13 && el.target.value) {\n      this.setState({\n        list: [\n          ...this.state.list,\n          {\n            title: el.target.value,\n            completed: false,\n            index: this.state.list.length\n          }\n        ],\n        clearBox: \"\",\n        searchTerm: \"\"\n      });\n    }\n  };\n\n  filterList = (displayArr, el) => {\n    let filteredItems = displayArr.filter(item => {\n      return item.title.toLowerCase().includes(el.target.value.toLowerCase());\n    });\n    this.setState({\n      filtered: filteredItems,\n      searchTerm: el.target.value\n    });\n  };\n\n  selectTab = el => {\n    let newtabState = this.state.tabs.map((tab, currIndex) => {\n      if (currIndex === el) {\n        tab.activeStatus = true;\n      } else {\n        tab.activeStatus = false;\n      }\n      return tab;\n    });\n    this.setState({\n      tabs: newtabState\n    });\n  };\n\n  checkTab = () => {\n    for (let i = 0; i < this.state.tabs.length; i++) {\n      if (this.state.tabs[i].activeStatus === true) {\n        return i;\n      }\n    }\n  };\n\n  displayItems = tabIndex => {\n    if (tabIndex == 0) {\n      return this.state.list;\n    } else if (tabIndex == 1) {\n      return this.state.list.filter(item => {\n        return item.completed === true;\n      });\n    } else {\n      return this.state.list.filter(item => {\n        return item.completed === false;\n      });\n    }\n  };\n\n  deleteItem = index => {\n    let test = [...this.state.list];\n    test.splice(index, 1);\n    this.setState({\n      list: test.map((item, i) => {\n        item.index = i;\n        return item;\n      })\n    });\n  };\n\n  render() {\n    let toDisplay = this.displayItems(this.checkTab());\n\n    return (\n      <div className=\"App\">\n        <h1>FAIRE</h1>\n        <div className=\"TabDiv\">\n          {this.state.tabs.map((tab, index) => (\n            <Nav\n              className=\"tabsDiv\"\n              key={index}\n              tabTitle={tab.tabTitle}\n              index={index}\n              activeStatus={tab.activeStatus}\n              onTabClick={this.selectTab}\n            />\n          ))}\n        </div>\n        <Search onSearchChange={this.filterList} dis={toDisplay}></Search>\n        {/* Add Item */}\n        <input\n          type=\"text\"\n          className=\"textfield\"\n          onChange={this.updateChange}\n          onKeyDown={this.addItem}\n          value={this.state.clearBox}\n          placeholder=\"Add Item\"\n        />\n        {/* <Button label=\"Add ToDo\"> </Button> */}\n        {/* Search */}\n\n        {this.state.searchTerm === \"\"\n          ? toDisplay.map((item, index) => {\n              return (\n                <List\n                  key={index}\n                  title={item.title}\n                  status={item.completed}\n                  onCheckClick={this.checkToDoitem}\n                  index={index}\n                  onDelete={this.deleteItem}\n                />\n              );\n            })\n          : this.state.filtered.map((item, index) => {\n              return (\n                <List key={index} title={item.title} status={item.completed} />\n              );\n            })}\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( < App / > , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}